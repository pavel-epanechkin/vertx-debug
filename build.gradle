group 'vertx-debug'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'


sourceCompatibility = 1.8

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Vertx
    compile 'io.vertx:vertx-web:3.6.2'
    compile 'com.zandero:rest.vertx:0.8.8'

    // Embedded DB for processed message history
    compile("com.h2database:h2:1.4.197")

    // Embedded DB for raw message history
    compile("org.rocksdb:rocksdbjni:5.5.1")

    // jOOQ
    compile("org.jooq:jooq:3.11.9")
    compile("org.jooq:jooq-meta:3.11.9")
    compile("org.jooq:jooq-codegen:3.11.9")

    // Utils
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.6'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:2.+"
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
        classpath 'org.jooq:jooq-codegen:3.11.9'
        classpath 'com.h2database:h2:1.4.197'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

jar {

    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes 'Main-Class': 'Main',
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) })
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
    jdbc() {
        driver('org.h2.Driver')
        url('jdbc:h2:file:~/testdb')
        user('admin')
        password('admin')
    }
    generator() {
        database() {
        }

        generate([:]) {
            pojos true
            daos true
        }
        target() {
            packageName('database.generated')
            directory('src/main/java')
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.codegen.GenerationTool.generate(writer.toString())

